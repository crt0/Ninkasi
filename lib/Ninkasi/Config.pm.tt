# -*- cperl -*-

package Ninkasi::Config;

use strict;
use warnings;

use File::Spec;
use Readonly;

use base qw/AppConfig Class::Singleton/;

use AppConfig qw/:argcount/;

Readonly our %USER_DEFAULT => (
    authentication_cgi  => 'authenticate',
    judge_coordinator   => 'ajk@ajk.name',
    maintainer_address  => 'ninkasi@ajk.name',
    path                => $ENV{HOME} . '/bin:/opt/local/bin:/usr/local/bin:/usr/bin:/bin',
    steward_coordinator => 'ajk@ajk.name',
);

# allow configuration values to be set at run time
our %RUNTIME_OPTION = ();
sub import {
    my ( undef, $argument ) = @_;

    %RUNTIME_OPTION = map {
        # remove angle brackets from Getopt::Euclid
        my ($variable) = /([^<>]*)/;
        $variable => $argument->{$_};
    } keys %$argument;

    return;
}

sub new { shift->instance(@_) }

sub _new_instance {
    my ($class) = @_;

    # use a test config if we're running under "./Build test"
    my ($config_file, $default_database_file, $default_log_file,
        $default_template_path);
    my $default_cgi_uri = File::Spec->catfile("/[% install_base_relpath.cgi %]");
    if ( $ENV{NINKASI_TEST_SERVER_ROOT} ) {
        $config_file = File::Spec->catfile( $ENV{NINKASI_TEST_SERVER_ROOT},
                                            qw/conf ninkasi.conf/ );
        $default_database_file = File::Spec->catfile(
            $ENV{NINKASI_TEST_SERVER_ROOT}, 'database'
        );
        $default_log_file = File::Spec->catfile(
            $ENV{NINKASI_TEST_SERVER_ROOT}, 'log'
        );
        $default_template_path = File::Spec->catfile(
            $ENV{NINKASI_TEST_SERVER_ROOT}, File::Spec->updir(),
            qw/blib share template/
        );
    }

    # otherwise install in share/
    else {
        $config_file = File::Spec->catfile('[% install_base %]',
                                           '[% install_base_relpath.share %]',
                                           qw/ninkasi.conf/);
        $default_database_file
            = File::Spec->catfile('[% install_base %]',
                                  '[% install_base_relpath.share %]',
                                  qw/database/);
        $default_log_file = File::Spec->catfile('[% install_base %]',
                                                qw/var ninkasi log/);
        $default_template_path
            = File::Spec->catfile('[% install_base %]',
                                  '[% install_base_relpath.share %]',
                                  qw/template/);
    }

    my $self = $class->SUPER::new( { GLOBAL => { ARGCOUNT => ARGCOUNT_ONE } } );

    # set defaults
    my %DEFAULT = (
        cgi_uri          => $default_cgi_uri,
        config_file      => $config_file,
        database_file    => $default_database_file,
        date1            => '[% date1 %]',
        date2            => '[% date2 %]',
        dlevel           => 0,
        disabled         => '',
        log_file         => $default_log_file,
        roster           => '',
        template_path    => $default_template_path,
        test_server_root => $ENV{NINKASI_TEST_SERVER_ROOT},
        testing          => !!$ENV{NINKASI_TEST_SERVER_ROOT},
        %USER_DEFAULT
    );
    $self->define( map { $_ => { DEFAULT => $DEFAULT{$_} } } keys %DEFAULT );

    # read in config file
    if (-r $config_file) {
        $self->file($config_file);
    }

    return bless $self, $class;
}

1;

__END__

=head1 NAME

Ninkasi::Config - interface to the Ninkasi configuration file

=head1 SYNOPSIS

  use Ninkasi::Config;
  
  # create an object for accessing configuration values
  my $config = Ninkasi::Config->new();
  
  # import configuration values at runtime using Getopt::Euclid
  Ninkasi::Config->import(\%ARGV);
  
  # access configuration values
  my $database_file = $config->get('database_file');
  my $maintainer_address = $config->get('maintainer_address');
  # etc.

=head1 DESCRIPTION

Ninkasi::Config provides an interface to the L<Ninkasi(3)>
configuration file.  Values can be set at runtime using the C<import>
fuction as shown above -- this approach is useful for allowing the
user to override configuration parameters on the command line.  The
configuration file is loaded each time C<new> is called.

=head2 Defaults

The module provides following compile-time defaults, which can be
overloaded in the configuration file or at runtime:

  config_file    [% install_base %]/[% install_base_relpath.share %]/ninkasi.conf
  database_file  [% install_base %]/[% install_base_relpath.share %]/database
  log_file       [% install_base %]/var/ninkasi/log
  template_path  [% install_base %]/[% install_base_relpath.share %]/template

Other compile-time defaults can be set by editing the module source
and changing the C<%USER_DEFAULT> constant.

=head1 SUBROUTINES/METHODS

This module inherits from L<AppConfig(3)>, so its methods may also be
used.

=over 4

=item $config = Ninkasi::Config->new()

Create a new object for accessing configuration parameters.

=item $config->import(\%runtime_parameters)

Override certain configuration values set in the configuration file
with those in C<%runtime_parameters>.  Since this method is named
C<import>, these values can also be set when loading the module with
C<use>.

=back

=head1 CONFIGURATION

The default configuration file is

  [% install_base %]/[% install_base_relpath.share %]/ninkasi.conf

=head1 ENVIRONMENT

=over 4

=item NINKASI_TEST_SERVER_ROOT

Used to determine whether the module is running in an
L<Apache::Test(3)> environment.  If so, the parameter defaults are set
instead to

  config_file    $NINKASI_TEST_SERVER_ROOT/conf/ninkasi.conf
  database_file  $NINKASI_TEST_SERVER_ROOT/database
  log_file       $NINKASI_TEST_SERVER_ROOT/log
  template_path  $NINKASI_TEST_SERVER_ROOT/blib/share/template

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.  Please report problems to
Andrew Korty <andrew@korty.name>.  Patches are welcome.

=head1 AUTHOR

Andrew Korty <andrew@korty.name>

=head1 LICENSE AND COPYRIGHT

This software is in the public domain.

=head1 SEE ALSO

L<AppConfig(3)>, L<Ninkasi(3)>
